// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entities "GoCleanArchitecture/entities"

	mock "github.com/stretchr/testify/mock"
)

// TokenUsecase is an autogenerated mock type for the TokenUsecase type
type TokenUsecase struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: id
func (_m *TokenUsecase) CreateToken(id string) (entities.Token, error) {
	ret := _m.Called(id)

	var r0 entities.Token
	if rf, ok := ret.Get(0).(func(string) entities.Token); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAccessToken provides a mock function with given fields: id, refreshToken
func (_m *TokenUsecase) RefreshAccessToken(id string, refreshToken string) (entities.Token, error) {
	ret := _m.Called(id, refreshToken)

	var r0 entities.Token
	if rf, ok := ret.Get(0).(func(string, string) entities.Token); ok {
		r0 = rf(id, refreshToken)
	} else {
		r0 = ret.Get(0).(entities.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: token
func (_m *TokenUsecase) VerifyToken(token string) (map[string]interface{}, error) {
	ret := _m.Called(token)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
